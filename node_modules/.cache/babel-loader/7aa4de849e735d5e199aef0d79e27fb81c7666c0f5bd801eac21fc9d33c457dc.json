{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Desktop\\\\youtube_clone\\\\src\\\\components\\\\SearchFeed.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Stack, Box, Typography } from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Videos from './Videos';\nimport { FetchApi } from '../utils/FetchApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchFeed = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const {\n    searchTerm\n  } = useParams();\n  useEffect(() => {\n    FetchApi(`search?part=snippet&q=${searchTerm}`).then(data => setVideos(data.items));\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 2,\n    sx: {\n      overflowY: 'auto',\n      height: '90vh',\n      flex: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      mb: 2,\n      fontWeight: \"bold\",\n      sx: {\n        color: 'WHITE'\n      },\n      children: [\"Search For \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#FC2503'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 18\n      }, this), \" videos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Videos, {\n      videos: videos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchFeed, \"lUPIy5n9ZbN9wO2YLUQoCT4XmjA=\", false, function () {\n  return [useParams];\n});\n_c = SearchFeed;\nexport default SearchFeed;\nvar _c;\n$RefreshReg$(_c, \"SearchFeed\");","map":{"version":3,"names":["React","Stack","Box","Typography","useState","useEffect","useParams","Videos","FetchApi","SearchFeed","videos","setVideos","searchTerm","then","data","items","overflowY","height","flex","color"],"sources":["C:/Users/GIGABYTE/Desktop/youtube_clone/src/components/SearchFeed.jsx"],"sourcesContent":["import React from 'react'\r\nimport { Stack,Box,Typography } from '@mui/material'\r\nimport { useState,useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Videos from './Videos'\r\nimport {FetchApi} from '../utils/FetchApi'\r\nconst SearchFeed = () => {\r\n\r\nconst [videos, setVideos] = useState([])\r\nconst{searchTerm}=useParams();\r\nuseEffect(()=>{\r\n  FetchApi(`search?part=snippet&q=${searchTerm}`).then((data)=>setVideos(data.items))\r\n},[searchTerm]);\r\n\r\n  return (\r\n\r\n    <Box p={2} sx={{overflowY:'auto',height:'90vh',flex:2}}>\r\n    <Typography variant='h4' mb={2} fontWeight='bold' sx={{color:'WHITE'}} >\r\n      Search For <span style={{color:'#FC2503'}} ></span> videos\r\n    </Typography>\r\n\r\n    <Videos videos={videos}/>\r\n    </Box>\r\n\r\n  )\r\n}\r\n\r\nexport default SearchFeed"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAACC,GAAG,EAACC,UAAU,QAAQ,eAAe;AACpD,SAASC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAAQC,QAAQ,QAAO,mBAAmB;AAAA;AAC1C,MAAMC,UAAU,GAAG,MAAM;EAAA;EAEzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAK;IAACQ;EAAU,CAAC,GAACN,SAAS,EAAE;EAC7BD,SAAS,CAAC,MAAI;IACZG,QAAQ,CAAE,yBAAwBI,UAAW,EAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAGH,SAAS,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;EACrF,CAAC,EAAC,CAACH,UAAU,CAAC,CAAC;EAEb,oBAEE,QAAC,GAAG;IAAC,CAAC,EAAE,CAAE;IAAC,EAAE,EAAE;MAACI,SAAS,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACC,IAAI,EAAC;IAAC,CAAE;IAAA,wBACvD,QAAC,UAAU;MAAC,OAAO,EAAC,IAAI;MAAC,EAAE,EAAE,CAAE;MAAC,UAAU,EAAC,MAAM;MAAC,EAAE,EAAE;QAACC,KAAK,EAAC;MAAO,CAAE;MAAA,WAAE,aAC3D;QAAM,KAAK,EAAE;UAACA,KAAK,EAAC;QAAS;MAAE;QAAA;QAAA;QAAA;MAAA,QAAS,WACrD;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eAEb,QAAC,MAAM;MAAC,MAAM,EAAET;IAAO;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACnB;AAGV,CAAC;AAAA,GAnBKD,UAAU;EAAA,QAGEH,SAAS;AAAA;AAAA,KAHrBG,UAAU;AAqBhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}